package ed25519.test;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.Assert;

import java.security.NoSuchAlgorithmException;

import ed25519.application.Ed25519;


public class Ed25519Test {

	@Test(dependsOnGroups= "constants")
	public void testCreateCrypto() throws NoSuchAlgorithmException {
		Ed25519 crypto = new Ed25519();
		Assert.assertNotNull(crypto);
	}
	
	@DataProvider(name = "sign")
	public static Object[][] publickeyProvider() {
		byte[] sk1 = {};
		byte[] pk1 = {(byte) 0xe0, (byte) 0xb1, (byte) 0xfe, 0x74, 0x11, 0x7e, 0x1b, (byte) 0x95, (byte) 0xb6, 0x8, (byte) 0xa4, (byte) 0xf2, 0x21, (byte) 0xdf, 0x31, 0x47, 0x74, (byte) 0xb2, 0xe, (byte) 0xa6, 0x68, 0x42, 0x35, 0xd, 0x51, 0x53, 0x71, (byte) 0xc7, (byte) 0xc6, (byte) 0x96, 0x6c, 0x6e};
		byte[] s1 = {0x51, 0x3a, (byte) 0xb2, 0x38, 0x3c, 0x40, 0xe, (byte) 0xad, (byte) 0xa6, 0x2f, 0x2a, 0x63, (byte) 0x93, (byte) 0x82, (byte) 0xdf, (byte) 0xd7, (byte) 0xa5, 0x21, (byte) 0xcc, 0x2e, 0x7e, 0x1e, (byte) 0x90, (byte) 0xcd, (byte) 0xc5, 0x16, 0x40, 0x42, 0x7b, 0x23, (byte) 0x9f, 0x5f, (byte) 0xfe, (byte) 0xa8, (byte) 0xca, 0x20, 0x79, (byte) 0xb2, (byte) 0xff, (byte) 0xc5, 0x31, 0x6a, 0x70, 0x4f, (byte) 0xc1, 0x5, 0x2f, 0x8, 0x6, (byte) 0xc3, 0xe, 0x6e, 0x4c, (byte) 0xe7, (byte) 0xf4, 0x8, 0x54, 0x1b, 0x65, (byte) 0xf7, (byte) 0xd1, 0x44, 0x13, 0xa};
		byte[] sk2 = "HelloWorld".getBytes();
		byte[] pk2 = {0x30, (byte) 0xd1, 0x6, 0x5e, (byte) 0xe6, (byte) 0xbb, 0x57, (byte) 0xa2, 0x3c, 0x33, 0x9, (byte) 0xe8, 0x3b, (byte) 0xf0, (byte) 0xd1, (byte) 0xfc, 0x3b, (byte) 0xd7, 0x13, (byte) 0xea, 0x61, (byte) 0xd2, (byte) 0xe7, 0x6d, 0x19, (byte) 0x93, 0x2b, 0x7a, (byte) 0xdb, (byte) 0x8c, (byte) 0x83, (byte) 0xaf};
		byte[] s2 = {(byte) 0xab,0x65,0x39,(byte) 0x94,(byte) 0xb2,(byte) 0xd5,(byte) 0x85,0x50,(byte) 0xca,0x2c,0x14,(byte) 0xc8,(byte) 0x92,(byte) 0xa8,(byte) 0xea,0x4f,(byte) 0x95,0x1b,0x7a,0x67,0x54,(byte) 0x92,0x33,(byte) 0xdb,(byte) 0xd4,0x36,(byte) 0x9a,0x58,0x67,0x5f,0x7f,(byte) 0x87,0x2a,(byte) 0xdc,0x5,(byte) 0x84,(byte) 0xe9,(byte) 0x83,0x49,(byte) 0x98,(byte) 0xf4,0x8,0x73,0x55,(byte) 0xe4,(byte) 0xa7,(byte) 0xaf,(byte) 0xd9,0x23,0x60,(byte) 0xb1,0x65,(byte) 0xb1,(byte) 0x93,(byte) 0x94,(byte) 0xbf,0x6e,0x74,0x44,(byte) 0x88,(byte) 0x88,(byte) 0xc1,0x19,0x9};
		byte[] sk3 = {(byte) 0x9d, 0x61, (byte) 0xb1, (byte) 0x9d, (byte) 0xef, (byte) 0xfd, 0x5a, 0x60, (byte) 0xba, (byte) 0x84, 0x4a, (byte) 0xf4, (byte) 0x92, (byte) 0xec, 0x2c, (byte) 0xc4, 0x44, 0x49, (byte) 0xc5, 0x69, 0x7b, 0x32, 0x69, 0x19, 0x70, 0x3b, (byte) 0xac, 0x03, 0x1c, (byte) 0xae, 0x7f, 0x60};
		byte[] pk3 = {(byte) 0xd7, 0x5a, (byte) 0x98, 0x01, (byte) 0x82, (byte) 0xb1, 0x0a, (byte) 0xb7, (byte) 0xd5, 0x4b, (byte) 0xfe, (byte) 0xd3, (byte) 0xc9, 0x64, 0x07, 0x3a, 0x0e, (byte) 0xe1, 0x72, (byte) 0xf3, (byte) 0xda, (byte) 0xa6, 0x23, 0x25, (byte) 0xaf, 0x02, 0x1a, 0x68, (byte) 0xf7, 0x07, 0x51, 0x1a};
		byte[] s3 = {(byte) 0x8d,0x25,(byte) 0xf3,0x11,(byte) 0xe3,(byte) 0xeb,(byte) 0x90,0x47,(byte) 0xed,(byte) 0xf7,(byte) 0xe8,0x18,0x55,0x20,(byte) 0xa9,(byte) 0x98,0x1e,(byte) 0xef,(byte) 0x95,0x57,(byte) 0xa1,(byte) 0xef,(byte) 0xba,0x77,(byte) 0x8c,0x6c,(byte) 0x9d,(byte) 0xaa,0x3a,0xa,0x37,(byte) 0xcf,(byte) 0x9f,(byte) 0xe3,0x8,(byte) 0xbc,0x1a,(byte) 0x9a,(byte) 0x84,(byte) 0xe5,0x4f,(byte) 0xfe,0x74,(byte) 0xa9,0x65,0x69,0x3d,(byte) 0xfd,(byte) 0x8a,(byte) 0xb5,0x55,(byte) 0xe8,(byte) 0xc6,(byte) 0xf7,0x2,(byte) 0xf6,0x1,0x1f,(byte) 0x8f,0x7a,(byte) 0x83,0x3f,0x39,0xf};
		Object[][] data = {{sk1,pk1,s1}, {sk2,pk2,s2}, {sk3,pk3,s3}};
		return data;
	}
	
	@Test(dataProvider = "sign", dependsOnGroups= {"basics", "bigpoint"}, dependsOnMethods = {"ed25519.test.CurveTest.testScalarMult","ed25519.test.CurveTest.testEncodePoint"})
	public void testGetPublicKey(byte[] sk, byte[] pk, byte[] s) throws NoSuchAlgorithmException {
		Ed25519 crypto = new Ed25519();
		Assert.assertEquals(crypto.getPublikKey(sk), pk);
	}
	
	@Test(dataProvider = "sign")
	public void testSign(byte[] sk, byte[] pk, byte[] s) throws NoSuchAlgorithmException {
		Ed25519 crypto = new Ed25519();
		byte[] m = "Hello World".getBytes();
		Assert.assertEquals(crypto.sign(m, sk, pk), s);
	}
	
}
